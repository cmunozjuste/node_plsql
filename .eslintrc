//
//  ESLINT CONFIGURATION FILE
//
//  Compatible and last updated for eslint version 1.10.1
//

{
    "env": {
        "node": true,
        "es6": true
    },

    "globals": {
    },

    "ecmaFeatures": {
        "arrowFunctions": true,
        "blockBindings": true,
        "defaultParams": true
    },

    "rules": {

        //
        //  Possible Errors
        //  ---------------

        // disallow or enforce trailing commas (recommended)
        "comma-dangle": [2, "never"],

        // disallow assignment in conditional expressions (recommended)
        "no-cond-assign": 2,

        // disallow use of console in the node environment (recommended)
        "no-console": 0,

        // disallow use of constant expressions in conditions (recommended)
        "no-constant-condition": 2,

        // disallow control characters in regular expressions (recommended)
        "no-control-regex": 2,

        // disallow use of debugger (recommended)
        "no-debugger": 1,

        // disallow duplicate arguments in functions (recommended)
        "no-dupe-args": 2,

        // disallow duplicate keys when creating object literals (recommended)
        "no-dupe-keys": 2,

        // disallow a duplicate case label. (recommended)
        "no-duplicate-case": 2,

        // disallow the use of empty character classes in regular expressions (recommended)
        "no-empty-character-class": 2,

        // disallow empty statements (recommended)
        "no-empty": 2,

        // disallow assigning to the exception in a catch block (recommended)
        "no-ex-assign" : 2,

        // disallow double-negation boolean casts in a boolean context (recommended)
        "no-extra-boolean-cast": 2,

        // disallow unnecessary parentheses
        "no-extra-parens": 0,

        // disallow unnecessary semicolons (recommended) (fixable)
        "no-extra-semi": 2,

        // disallow overwriting functions written as function declarations (recommended)
        "no-func-assign": 2,

        // disallow function or variable declarations in nested blocks (recommended)
        "no-inner-declarations": 2,

        // disallow invalid regular expression strings in the RegExp constructor (recommended)
        "no-invalid-regexp": 2,

        // disallow irregular whitespace outside of strings and comments (recommended)
        "no-irregular-whitespace": 2,

        // disallow negation of the left operand of an in expression (recommended)
        "no-negated-in-lhs": 2,

        // disallow the use of object properties of the global object (Math and JSON) as functions (recommended)
        "no-obj-calls": 2,

        // disallow multiple spaces in a regular expression literal (recommended)
        "no-regex-spaces": 2,

        // disallow sparse arrays (recommended)
        "no-sparse-arrays": 2,

        // Avoid code that looks like two expressions but is actually one
        "no-unexpected-multiline": 2,

        // disallow unreachable statements after a return, throw, continue, or break statement (recommended)
        "no-unreachable": 2,

        // disallow comparisons with the value NaN (recommended)
        "use-isnan": 2,

        // Ensure JSDoc comments are valid
        "valid-jsdoc": [1, {
            "requireParamDescription": false,
            "requireReturnDescription": false,
            "requireReturn": false
        }],

        // Ensure that the results of typeof are compared against a valid string (recommended)
        "valid-typeof": 2,

        //
        //  Best Practices
        //  --------------

        // Enforces getter/setter pairs in objects
        "accessor-pairs": 0,

        // treat var statements as if they were block scoped
        "block-scoped-var": 0,

        // specify the maximum cyclomatic complexity allowed in a program
        "complexity": 0,

        // require return statements to either always or never specify values
        "consistent-return": 2,

        // specify curly brace conventions for all control statements
        "curly": [2, "all"],

        // require default case in switch statements
        "default-case": 2,

        // enforces consistent newlines before or after dots
        "dot-location": 0,

        // encourages use of dot notation whenever possible
        "dot-notation": [2, {"allowKeywords": true, "allowPattern": "^[a-zA-Z]+(_[a-zA-Z]+)+$"}],

        // require the use of === and !== (fixable)
        "eqeqeq": 2,

        // make sure for-in loops have an if statement
        "guard-for-in": 1,

        // disallow the use of alert, confirm, and prompt
        "no-alert": 0,

        // disallow use of arguments.caller or arguments.callee
        "no-caller": 2,

        // disallow lexical declarations in case clauses
        "no-case-declarations": 2,

        // disallow division operators explicitly at beginning of regular expression
        "no-div-regex": 2,

        // disallow else after a return in an if
        "no-else-return": 1,

        // disallow use of labels for anything other than loops and switches
        "no-empty-label": 2,

        // disallow use of empty destructuring patterns
        "no-empty-pattern": 1,

        // disallow comparisons to null without a type-checking operator
        "no-eq-null": 2,

        // disallow use of eval()
        "no-eval": 2,

        // disallow adding to native types
        "no-extend-native": 2,

        // disallow unnecessary function binding
        "no-extra-bind": 2,

        // disallow fallthrough of case statements (recommended)
        "no-fallthrough": 2,

        // disallow the use of leading or trailing decimal points in numeric literals
        "no-floating-decimal": 2,

        // disallow the type conversions with shorter notations
        "no-implicit-coercion": [1, {"boolean": true, "number": true, "string": true}],

        // disallow use of eval()-like methods
        "no-implied-eval": 2,

        // disallow this keywords outside of classes or class-like objects
        "no-invalid-this": 0,

        // disallow usage of __iterator__ property
        "no-iterator": 2,

        // disallow use of labeled statements
        "no-labels": 2,

        // disallow unnecessary nested blocks
        "no-lone-blocks": 2,

        // disallow creation of functions within loops
        "no-loop-func": 2,

        // disallow the use of magic numbers
        "no-magic-numbers": 0,

        // disallow use of multiple spaces (fixable)
        "no-multi-spaces": 1,

        // disallow use of multiline strings
        "no-multi-str": 2,

        // disallow reassignments of native objects
        "no-native-reassign": 2,

        // disallow use of new operator for Function object
        "no-new-func": 2,

        // disallows creating new instances of String,Number, and Boolean
        "no-new-wrappers": 2,

        // disallow use of the new operator when not part of an assignment or comparison
        "no-new": 2,

        // disallow use of octal escape sequences in string literals, such as var foo = "Copyright \251";
        "no-octal-escape": 2,

        // disallow use of octal literals (recommended)
        "no-octal": 2,

        // disallow reassignment of function parameters
        "no-param-reassign": 0,

        // disallow use of process.env
        "no-process-env": 0,

        // disallow usage of __proto__ property
        "no-proto": 2,

        // disallow declaring the same variable more than once (recommended)
        "no-redeclare": 2,

        // disallow use of assignment in return statement
        "no-return-assign": 2,

        // disallow use of javascript: urls.
        "no-script-url": 2,

        // disallow comparisons where both sides are exactly the same
        "no-self-compare": 2,

        // disallow use of the comma operator
        "no-sequences": 2,

        // restrict what can be thrown as an exception
        "no-throw-literal": 2,

        // disallow usage of expressions in statement position
        "no-unused-expressions": 2,

        // disallow unnecessary .call() and .apply()
        "no-useless-call": 2,

        // disallow unnecessary concatenation of literals or template literals
        "no-useless-concat": 1,

        // disallow use of the void operator
        "no-void": 2,

        // disallow usage of configurable warning terms in comments - e.g. TODO or FIXME
        "no-warning-comments": 0,

        // disallow use of the with statement
        "no-with": 2,

        // require use of the second argument for parseInt()
        "radix": 2,

        // require declaration of all vars at the top of their containing scope
        "vars-on-top": 2,

        // require immediate function invocation to be wrapped in parentheses
        "wrap-iife": [2, "outside"],

        // require or disallow Yoda conditions
        "yoda": [2, "never", {"exceptRange": true}],

        //
        //  Strict Mode
        //  -----------

        // controls location of Use Strict Directives
        "strict": [2, "global"],

        //
        //  Variables
        //  ---------

        // enforce or disallow variable initializations at definition
        "init-declarations": 0,

        // disallow the catch clause parameter name being the same as a variable in the outer scope
        "no-catch-shadow": 2,

        // disallow deletion of variables (recommended)
        "no-delete-var": 2,

        // disallow labels that share a name with a variable
        "no-label-var": 2,

        // disallow shadowing of names such as arguments
        "no-shadow-restricted-names": 2,

        // disallow declaration of variables already declared in the outer scope
        "no-shadow": [1, {"builtinGlobals": false}],

        // disallow use of undefined when initializing variables
        "no-undef-init": 2,

        // disallow use of undeclared variables unless mentioned in a /*global */ block (recommended)
        "no-undef": 2,

        // disallow use of undefined variable
        "no-undefined": 1,

        // disallow declaration of variables that are not used in the code (recommended)
        "no-unused-vars": [1, {"vars": "all", "args": "after-used"}],

        // disallow use of variables before they are defined
        "no-use-before-define": [2, "nofunc"],

        //
        //  Node.js and CommonJS
        //  --------------------


        // enforce return after a callback
        "callback-return": 0,

        // enforce require() on top-level module scope
        "global-require": 1,

        // enforce error handling in callbacks
        "handle-callback-err": 0,

        // disallow mixing regular variable and require declarations
        "no-mixed-requires": 0,

        // disallow use of new operator with the require function
        "no-new-require": 1,

        // disallow string concatenation with __dirname and __filename
        "no-path-concat": 1,

        // disallow process.exit()
        "no-process-exit": 0,

        // restrict usage of specified node modules
        "no-restricted-modules": 0,

        // disallow use of synchronous methods
        "no-sync": 0,

        //
        //  Stylistic Issues
        //  ----------------

        // enforce spacing inside array brackets (fixable)
        "array-bracket-spacing": [1, "never"],

        // disallow or enforce spaces inside of single line blocks (fixable)
        "block-spacing": [1, "never"],

        // enforce one true brace style
        "brace-style": [1, "1tbs"],

        // require camel case names
        "camelcase": 1,

        // enforce spacing before and after comma (fixable)
        "comma-spacing": [1, {before: false, after: true}],

        // enforce one true comma style
        "comma-style": [1, "last"],

        // require or disallow padding inside computed properties (fixable)
        "computed-property-spacing": [1, "never"],

        // enforce consistent naming when capturing the current execution context
        "consistent-this": [1, "that"],

        // enforce newline at the end of file, with no multiple empty lines (fixable)
        "eol-last": 1,

        // require function expressions to have a name
        //  ???
        "func-names": 0,

        // enforce use of function declarations or expressions
        "func-style": 0,

        // this option enforces minimum and maximum identifier lengths (variable names, property names etc.)
        //  ???
        "id-length": 0,

        // require identifiers to match the provided regular expression
        //  ???
        "id-match": 0,

        // specify tab or space width for your code (fixable)
        "indent": [1, "tab", {"SwitchCase": 1}],

        // specify whether double or single quotes should be used in JSX attributes
        "jsx-quotes": 0,

        // enforce spacing between keys and values in object literal properties
        "key-spacing": [1, {"beforeColon": false, "afterColon": true}],

        // disallow mixed 'LF' and 'CRLF' as linebreaks
        //  ???
        "linebreak-style": 0,

        // enforce empty lines around comments
        //  ???
        "lines-around-comment": 0,

        // specify the maximum depth callbacks can be nested
        "max-nested-callbacks": [1, 10],

        // require a capital letter for constructors
        "new-cap": 1,

        // disallow the omission of parentheses when invoking a constructor with no arguments
        "new-parens": 1,

        // require or disallow an empty newline after variable declarations
        "newline-after-var": [1, "always"],

        // disallow use of the Array constructor
        "no-array-constructor": 1,

        // disallow use of the continue statement
        "no-continue": 1,

        // disallow comments inline after code
        "no-inline-comments": 0,

        // disallow if as the only statement in an else block
        // ???
        "no-lonely-if": 0,

        // disallow mixed spaces and tabs for indentation (recommended)
        "no-mixed-spaces-and-tabs": 1,

        // disallow multiple empty lines
        "no-multiple-empty-lines": 0,

        // disallow negated conditions
        //  ???
        "no-negated-condition": 0,

        // disallow nested ternary expressions
        "no-nested-ternary": 1,

        // disallow the use of the Object constructor
        "no-new-object": 1,

        // disallow use of certain syntax in code
        "no-restricted-syntax": [1, "WithStatement"],

        // disallow space between function identifier and application (fixable)
        "no-spaced-func": 1,

        // disallow the use of ternary operators
        "no-ternary": 0,

        // disallow trailing whitespace at the end of lines (fixable)
        "no-trailing-spaces": 1,

        // disallow dangling underscores in identifiers
        "no-underscore-dangle": 0,

        // disallow the use of ternary operators when a simpler alternative exists
        "no-unneeded-ternary": 1,

        // require or disallow padding inside curly braces (fixable)
        "object-curly-spacing": [1, "never"],

        // require or disallow one variable declaration per function
        "one-var": 0,

        // require assignment operator shorthand where possible or prohibit it entirely
        "operator-assignment": 0,

        // enforce operators to be placed before or after line breaks
        "operator-linebreak": [1, "after"],

        // enforce padding within blocks
        "padded-blocks": 0,

        // require quotes around object literal property names
        "quote-props": [1, "consistent"],

        // specify whether backticks, double or single quotes should be used (fixable)
        "quotes": [1, "single"],

        // Require JSDoc comment
        "require-jsdoc": 0,

        // require or disallow use of semicolons instead of ASI (fixable)
        semi: [1, "always"],

        // enforce spacing before and after semicolons
        "semi-spacing": [1, {"before": false, "after": true}],

        // sort variables within the same declaration block
        "sort-vars": 0,

        // require a space after certain keywords (fixable)
        "space-after-keywords": [1, "always"],

        // require or disallow a space before blocks (fixable)
        "space-before-blocks": 1,

        // require or disallow a space before function opening parenthesis (fixable)
        "space-before-function-paren": [1, {"anonymous": "always", "named": "never"}],

        // require a space before certain keywords (fixable)
        "space-before-keywords": 0,

        // require or disallow spaces inside parentheses
        "space-in-parens": 0,

        // require spaces around operators (fixable)
        "space-infix-ops": 1,

        // require a space after return, throw, and case (fixable)
        "space-return-throw-case": 1,

        // require or disallow spaces before/after unary operators (fixable)
        "space-unary-ops": 1,

        // require or disallow a space immediately following the // or /* in a comment
        "spaced-comment": [0, "always"],

        // require regex literals to be wrapped in parentheses
        "wrap-regex": 0,

        //
        //  ECMAScript 6
        //  ------------

        // require braces in arrow function body
        "arrow-body-style": [1, "as-needed"],

        // require parens in arrow function arguments
        "arrow-parens": [1, "always"],

        // require space before/after arrow function's arrow (fixable)
        "arrow-spacing": [1, {"before": true, "after": true}],

        // verify calls of super() in constructors
        "constructor-super": 2,

        // enforce spacing around the * in generator functions (fixable)
        "generator-star-spacing": [1, {"before": true, "after": false}],

        // disallow arrow functions where a condition is expected
        "no-arrow-condition": 2,

        // disallow modifying variables of class declarations
        "no-class-assign": 2,

        // disallow modifying variables that are declared using const
        "no-const-assign": 2,

        // disallow duplicate name in class members
        "no-dupe-class-members": 2,

        // disallow use of this/super before calling super() in constructors.
        "no-this-before-super": 2,

        // require let or const instead of var
        "no-var": 0,

        // require method and property shorthand syntax for object literals
        "object-shorthand": 0,

        // suggest using arrow functions as callbacks
        "prefer-arrow-callback": 0,

        // suggest using const declaration for variables that are never modified after declared
        "prefer-const": 0,

        // suggest using Reflect methods where applicable
        "prefer-reflect": 0,

        // suggest using the spread operator instead of .apply().
        "prefer-spread": 0,

        // suggest using template literals instead of strings concatenation
        "prefer-template": 0,

        // disallow generator functions that do not have yield
        "require-yield": 2,

        //
        //  Legacy
        //  ------

        // specify the maximum depth that blocks can be nested
        "max-depth": [1, 10],

        // specify the maximum length of a line in your program
        "max-len":  [1, 2000],

        // limits the number of parameters that can be used in the function declaration.
        "max-params": [1, 10],

        // specify the maximum number of statement allowed in a function
        "max-statements": [1, 150],

        // disallow use of bitwise operators
        "no-bitwise": 1,

        // disallow use of unary operators, ++ and --
        "no-plusplus": 0
    }
}
