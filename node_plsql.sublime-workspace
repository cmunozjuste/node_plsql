{
	"auto_complete":
	{
		"selected_items":
		[
		]
	},
	"buffers":
	[
		{
			"file": "lib/request.js",
			"settings":
			{
				"buffer_size": 9057,
				"line_ending": "Windows"
			}
		},
		{
			"file": "error.log",
			"settings":
			{
				"buffer_size": 36655,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/oracleBindings.cc",
			"settings":
			{
				"buffer_size": 15988,
				"line_ending": "Windows"
			}
		},
		{
			"contents": "#include \"global.h\"\n\n#include \"oracleObject.h\"\n\n///////////////////////////////////////////////////////////////////////////\nstatic std::string getSql(const std::string& procedure, const parameterListType& parameters);\nstatic void bind(ocip::Statement& statement, bool isVariable, const parameterListType& parameters);\nstatic std::string getParameterName(long position);\nstatic bool loadFileContent(const std::string filename, std::vector<unsigned char>& fileContents);\n\n///////////////////////////////////////////////////////////////////////////\nOracleObject::OracleObject(const Config& config)\n	:	m_Config(config)\n	,	m_environment(0)\n	,	m_connectionPool(0)\n{\n	if (m_Config.m_debug)\n	{\n		std::cout << \"OracleObject::OracleObject\" << std::endl << config.asString() << std::endl << std::flush;\n	}\n}\n\n///////////////////////////////////////////////////////////////////////////\nOracleObject::~OracleObject()\n{\n	if (m_Config.m_debug)\n	{\n		std::cout << \"OracleObject::~OracleObject\" << std::endl << std::flush;\n	}\n\n	destroy();\n}\n\n///////////////////////////////////////////////////////////////////////////\nbool OracleObject::create()\n{\n	if (m_Config.m_debug)\n	{\n		std::cout << \"OracleObject::create\" << std::endl << std::flush;\n	}\n\n	// Create the Oracle enviroment\n	m_environment = new ocip::Environment(OCI_THREADED, m_Config.m_debug);\n	assert(m_environment);\n\n	// Are we using a connection pool\n	if (m_Config.m_conPool)\n	{\n		// Create the connection pool\n		m_connectionPool = new ocip::ConnectionPool(m_environment);\n		assert(m_connectionPool);\n\n		if (m_Config.m_debug)\n		{\n			std::cout << \"OracleObject::create: create connection pool. user=(\" << m_Config.m_username << \") password=(\" << m_Config.m_password << \") database=(\" << m_Config.m_database << \")\" << std::endl << std::flush;\n		}\n\n		// Create the connection pool\n		if (!m_connectionPool->create(m_Config.m_username, m_Config.m_password, m_Config.m_database, m_Config.m_conMin, m_Config.m_conMax, m_Config.m_conIncr))\n		{\n			m_OracleError = m_connectionPool->reportError(\"create connection pool\", __FILE__, __LINE__);\n			return false;\n		}\n	}\n\n	return true;\n}\n\n///////////////////////////////////////////////////////////////////////////\nbool OracleObject::destroy()\n{\n	if (m_Config.m_debug)\n	{\n		std::cout << \"OracleObject::destroy\" << std::endl << std::flush;\n	}\n\n	if (m_connectionPool)\n	{\n		// Destroy the connection pool\n		m_connectionPool->destroy();\n		delete m_connectionPool;\n		m_connectionPool = 0;\n	}\n\n	// Destroy the connection object\n	if (m_environment)\n	{\n		delete m_environment;\n		m_environment = 0;\n	}\n\n	return true;\n}\n\n///////////////////////////////////////////////////////////////////////////\nbool OracleObject::execute(const std::string& username, const std::string& password, const std::string& sql)\n{\n	if (m_Config.m_debug)\n	{\n		std::cout << \"OracleObject::execute\" << std::endl << std::flush;\n	}\n\n	// Create a new connection\n	ocip::Connection* connection = createConnection();\n\n	// Connect with database\n	if (!connection->connect(username, password))\n	{\n		std::ostringstream s;\n		s << \"error when trying to connect. username: \\\"\" << username << \"\\\" password: \\\"\" << password << \"\\\"\";\n		m_OracleError = connection->reportError(s.str(), __FILE__, __LINE__);\n		return false;\n	}\n\n	// Prepare statement\n	ocip::Statement statement(connection);\n	if (!statement.prepare(sql))\n	{\n		m_OracleError = statement.reportError(\"oci_statement_prepare\", __FILE__, __LINE__);\n		return false;\n	}\n\n	// Execute statement\n	if (!statement.execute(1))\n	{\n		m_OracleError = statement.reportError(\"oci_statement_execute\", __FILE__, __LINE__);\n		return false;\n	}\n\n	// Disconnect from the connection pool\n	if (!connection->disconnect())\n	{\n		m_OracleError = connection->reportError(\"disconnect from the connection pool\", __FILE__, __LINE__);\n		return false;\n	}\n\n	delete connection;\n\n	return true;\n}\n\n///////////////////////////////////////////////////////////////////////////\nbool OracleObject::request(const std::string& username, const std::string& password, const propertyListType& cgi, const fileListType& files, const std::string& doctablename, const std::string& procedure, const parameterListType& parameters, std::wstring* page)\n{\n	// 1. Connect with database\n	ocip::Connection* connection = createConnection();\n	if (!connection->connect(username, password))\n	{\n		m_OracleError = connection->reportError(\"connect\", __FILE__, __LINE__);\n		return false;\n	}\n\n	// 2. Initialize the request\n	if (!requestInit(connection, cgi))\n	{\n		return false;\n	}\n\n	// 3. Upload files\n	if (!requestUploadFiles(connection, files, doctablename))\n	{\n		return false;\n	}\n\n	// 4. Invoke the procedure\n	if (!requestRun(connection, procedure, parameters))\n	{\n		return false;\n	}\n\n	// 5. Retrieve the page content\n	if (!requestPage(connection, page))\n	{\n		return false;\n	}\n\n	// 6. Commit\n	connection->commit();\n\n	// 7. Disconnect from the connection pool\n	if (!connection->disconnect())\n	{\n		connection->reportError(\"disconnect from the connection pool\", __FILE__, __LINE__);\n		return false;\n	}\n	delete connection;\n\n	return true;\n}\n\n///////////////////////////////////////////////////////////////////////////\n//\n// The gateway is no longer:\n// * setting up the owa.ip_address record based on the client IP address (does not work with IPv6 addresses anyway)\n// * setting up the hostname, user id and password for basic authentication (the Apex Listener does not do this either)\n// * calling owa.initialize() before owa.init_cgi_env() (the Apex Listener does not do this either)\n//\n// htbuf_len: reduce this limit based on your worst-case character size.\n// For most character sets, this will be 2 bytes per character, so the limit would be 127.\n// For UTF8 Unicode, it's 3 bytes per character, meaning the limit should be 85.\n// For the newer AL32UTF8 Unicode, it's 4 bytes per character, and the limit should be 63.\n//\nbool OracleObject::requestInit(ocip::Connection* connection, const propertyListType& cgi)\n{\n	propertyListConstIteratorType it;\n	int i = 0;\n\n	if (m_Config.m_debug)\n	{\n		std::cout << \"OracleObject::requestInit\" << std::endl;\n		for (it = cgi.begin(), i = 0; it != cgi.end(); ++it, ++i)\n		{\n			std::cout << \"   \" << i << \". '\" << it->name << \"': '\" << it->value << \"'\" << std::endl;\n		}\n		std::cout << std::flush;\n	}\n\n	assert(cgi.size() > 0);\n\n	// Convert the list of properties into two separate lists with names and values\n	stringListType names;\n	stringListType values;\n	convert(cgi, &names, &values);\n\n	// Prepare statement\n	ocip::Statement statement(connection);\n	if (!statement.prepare(\"BEGIN owa.init_cgi_env(:c, :n, :v); htp.init; htp.htbuf_len := 63; END;\"))\n	{\n		m_OracleError = statement.reportError(\"oci_statement_prepare\", __FILE__, __LINE__);\n		return false;\n	}\n\n	// Bind the number of cgi entries\n	ocip::ParameterValue* bCount = new ocip::ParameterValue(\"c\", ocip::Integer, ocip::Input);\n	statement.addParameter(bCount);\n	bCount->value(static_cast<long>(cgi.size()));\n\n	// Bind array of CGI names\n	ocip::ParameterArray* bNames = new ocip::ParameterArray(\"n\", ocip::String, ocip::Input);\n	statement.addParameter(bNames);\n	bNames->value(names);\n\n	// Bind array of CGI values\n	ocip::ParameterArray* bValues = new ocip::ParameterArray(\"v\", ocip::String, ocip::Input);\n	statement.addParameter(bValues);\n	bValues->value(values);\n\n	// Execute statement\n	if (!statement.execute(1))\n	{\n		m_OracleError = statement.reportError(\"oci_statement_execute\", __FILE__, __LINE__);\n		return false;\n	}\n\n	return true;\n}\n\n///////////////////////////////////////////////////////////////////////////\nbool OracleObject::requestUploadFiles(ocip::Connection* connection, const fileListType& files, const std::string& doctablename)\n{\n	if (m_Config.m_debug)\n	{\n		std::cout << \"OracleObject::requestUploadFiles (\" << files.size() << \" files)\" << std::endl << std::flush;\n	}\n\n	// Process the files\n	fileListConstIteratorType it;\n	for (it = files.begin(); it != files.end(); ++it)\n	{\n		if (!uploadFile(connection, *it, doctablename))\n		{\n			return false;\n		}\n	}\n\n	return true;\n}\n\n///////////////////////////////////////////////////////////////////////////\nbool OracleObject::uploadFile(ocip::Connection* connection, const fileType& file, const std::string& doctablename)\n{\n	if (m_Config.m_debug)\n	{\n		std::cout << \"OracleObject::uploadFile (\" << file.m_path << \")\" << std::endl << std::flush;\n	}\n\n	sword status = 0;\n	OCILobLocator* locp = 0;\n	OCIBind* bindp = 0;\n\n	ocip::Statement statement(connection);\n\n	// Allocate lob descriptor\n	status = oci_lob_descriptor_allocate(connection->hEnv(), &locp);\n	if (status != OCI_SUCCESS)\n	{\n		m_OracleError = ocip::Environment::reportError(status, 0, \"oci_lob_descriptor_allocate\", __FILE__, __LINE__);\n		return false;\n	}\n\n	// Create temporary BLOB\n	status = oci_create_temporary_blob(connection->hSvcCtx(), connection->hError(), locp);\n	if (status != OCI_SUCCESS)\n	{\n		m_OracleError = ocip::Environment::reportError(status, 0, \"oci_create_temporary_blob\", __FILE__, __LINE__);\n		return false;\n	}\n\n	// Prepare statement\n	std::string sql = \"INSERT INTO \" + doctablename + \" (name, mime_type, doc_size, dad_charset, last_updated, content_type, blob_content) VALUES (:1, :2, :3, 'ascii', SYSDATE, 'BLOB', :4)\";\n	if (m_Config.m_debug)\n	{\n		std::cout << \"OracleObject::uploadFile: insert blob. sql=\\\"\" << sql << \"\\\".\" << std::endl << std::flush;\n	}\n	if (!statement.prepare(sql))\n	{\n		m_OracleError = statement.reportError(\"oci_statement_prepare\", __FILE__, __LINE__);\n		return false;\n	}\n\n	// Bind parameter\n	ocip::ParameterValue* bFilename	= new ocip::ParameterValue(\"1\", ocip::String, ocip::Input);\n	statement.addParameter(bFilename);\n\n	ocip::ParameterValue* bMimetype	= new ocip::ParameterValue(\"2\", ocip::String, ocip::Input);\n	statement.addParameter(bMimetype);\n\n	ocip::ParameterValue* bSize	= new ocip::ParameterValue(\"3\", ocip::Integer, ocip::Input);\n	statement.addParameter(bSize);\n\n	if (!statement.bind(&bindp, \"4\", SQLT_BLOB, &locp, sizeof(OCILobLocator*)))\n	{\n		m_OracleError = statement.reportError(\"oci_bind_by_name\", __FILE__, __LINE__);\n		return false;\n	}\n\n	// Load file\n	std::vector<unsigned char> fileContents;\n	if (!loadFileContent(file.m_path, fileContents))\n	{\n		std::string error = \"Unable to load file \\\"\" + file.m_path + \"\\\"\";\n		if (m_Config.m_debug)\n		{\n			std::cout << \"OracleObject::uploadFile: Unable to load file \\\"\" << file.m_path << \"\\\"!\" << std::endl << std::flush;\n		}\n		m_OracleError = oracleError(error, 0, 0, \"\", __FILE__, __LINE__);\n		return false;\n	}\n\n	if (m_Config.m_debug)\n	{\n		std::cout << \"OracleObject::uploadFile: file loaded. name= \\\"\" << file.m_fieldname << \"\\\" path= \\\"\" << file.m_path << \"\\\" size=\\\"\" << fileContents.size() << \"\\\".\" << std::endl << std::flush;\n	}\n\n	bFilename->value(file.m_fieldname);\n	bMimetype->value(file.m_mimetype);\n	bSize->value(static_cast<long>(fileContents.size()));\n\n	// write BLOB\n	if (!statement.writeBLOB(locp, fileContents))\n	{\n		m_OracleError = statement.reportError(\"write BLOB content\", __FILE__, __LINE__);\n		return false;\n	}\n\n	// Execute statement\n	if (!statement.execute(1))\n	{\n		m_OracleError = statement.reportError(\"insert BLOB content\\nsql: \" + sql, __FILE__, __LINE__);\n		return false;\n	}\n\n	// Free temporary BLOB\n	/*\n	status = oci_free_temporary_lob(connection->hSvcCtx(), connection->hError(), locp);\n	if (status != OCI_SUCCESS)\n	{\n		m_OracleError = ocip::Environment::reportError(status, 0, \"oci_free_temporary_lob\", __FILE__, __LINE__);\n		return false;\n	}\n	*/\n\n	// Free lob descriptor\n	status = oci_lob_descriptor_free(locp);\n	if (status != OCI_SUCCESS)\n	{\n		m_OracleError = ocip::Environment::reportError(status, connection->hError(), \"oci_lob_descriptor_free\", __FILE__, __LINE__);\n		return false;\n	}\n\n	if (m_Config.m_debug)\n	{\n		std::cout << \"OracleObject::uploadFile: file uploaded.\" << std::endl << std::flush;\n	}\n\n	return true;\n}\n\n///////////////////////////////////////////////////////////////////////////\nbool OracleObject::requestRun(ocip::Connection* connection, const std::string& procedure, const parameterListType& parameters)\n{\n	if (m_Config.m_debug)\n	{\n		std::cout << \"OracleObject::requestRun: (\" << procedure << \")\" << std::flush << std::endl;\n\n		std::cout << \"OracleObject::bind: parameter:\" << std::endl << ::to_string(parameters) << std::endl << std::flush;\n\n	}\n\n	// Create statement\n	ocip::Statement statement(connection);\n\n	// Prepare statement\n	std::string sql(getSql(procedure, parameters));\n	if (!statement.prepare(sql))\n	{\n		m_OracleError = statement.reportError(\"oci_statement_prepare\", __FILE__, __LINE__);\n		return false;\n	}\n\n	// Bind values for statement\n	bind(statement, (procedure[0] == '!'), parameters);\n\n	// Execute statement\n	if (!statement.execute(1))\n	{\n		m_OracleError = statement.reportError(\"oci_statement_execute\", __FILE__, __LINE__);\n		return false;\n	}\n\n	return true;\n}\n\n///////////////////////////////////////////////////////////////////////////\nbool OracleObject::requestPage(ocip::Connection* connection, std::wstring* page)\n{\n	if (m_Config.m_debug)\n	{\n		std::cout << \"OracleObject::requestPage\" << std::endl << std::flush;\n	}\n\n	sword status = 0;\n	OCILobLocator* locp = 0;\n	OCIBind* bindp = 0;\n\n	ocip::Statement statement(connection);\n\n	// Allocate lob descriptor\n	status = oci_lob_descriptor_allocate(connection->hEnv(), &locp);\n	if (status != OCI_SUCCESS)\n	{\n		m_OracleError = ocip::Environment::reportError(status, 0, \"oci_lob_descriptor_allocate\", __FILE__, __LINE__);\n		return false;\n	}\n\n	// Prepare statement\n	if (!statement.prepare(\"BEGIN node_plsql.get_page(:page); END;\"))\n	{\n		m_OracleError = statement.reportError(\"oci_statement_prepare\", __FILE__, __LINE__);\n		return false;\n	}\n\n	// Bind CLOB descriptor\n	if (!statement.bind(&bindp, \"page\", SQLT_CLOB, &locp, sizeof(OCILobLocator*)))\n	{\n		m_OracleError = statement.reportError(\"oci_bind_by_name\", __FILE__, __LINE__);\n		return false;\n	}\n\n	// Execute statement\n	if (!statement.execute(1))\n	{\n		m_OracleError = statement.reportError(\"oci_statement_execute\", __FILE__, __LINE__);\n		return false;\n	}\n\n	// Open CLOB and read the contents\n	if (!statement.openAndReadLOB(locp, page))\n	{\n		m_OracleError = statement.reportError(\"open and read CLOB content\", __FILE__, __LINE__);\n		return false;\n	}\n\n	// Free lob descriptor\n	status = oci_lob_descriptor_free(locp);\n	if (status != OCI_SUCCESS)\n	{\n		m_OracleError = ocip::Environment::reportError(status, connection->hError(), \"oci_lob_descriptor_free\", __FILE__, __LINE__);\n		return false;\n	}\n\n	return true;\n}\n\n///////////////////////////////////////////////////////////////////////////\nocip::Connection* OracleObject::createConnection()\n{\n	if (m_Config.m_debug)\n	{\n		std::cout << \"OracleObject::createConnection\" << std::endl << std::flush;\n	}\n\n	// Are we using a connection pool ?\n	ocip::Connection* connection = 0;\n	if (m_Config.m_conPool)\n	{\n		connection = new ocip::Connection(m_connectionPool);\n	}\n	else\n	{\n		connection = new ocip::Connection(m_environment);\n	}\n	assert(connection);\n\n	return connection;\n}\n\n///////////////////////////////////////////////////////////////////////////\nstatic std::string getSql(const std::string& procedure, const parameterListType& parameters)\n{\n	std::string sql;\n\n	if (procedure[0] == '!')\n	{\n		sql = \"BEGIN \" + procedure.substr(1) + \"(name_array=>:n, value_array=>:v); END;\";\n	}\n	else\n	{\n		parameterListConstIteratorType it;\n		long pos = 1;\n		for (it = parameters.begin(); it != parameters.end(); ++it)\n		{\n			switch (it->type())\n			{\n				case parameterType::Scalar:\n				case parameterType::Array:\n					if (pos > 1)\n					{\n						sql += \",\";\n					}\n					sql += it->name() + \"=>:\" + getParameterName(pos);\n					++pos;\n					break;\n				case parameterType::Null:\n				default:\n					break;\n			}\n		}\n		sql = \"BEGIN \" + procedure + \"(\" + sql + \"); END;\";\n	}\n\n	return sql;\n}\n\n///////////////////////////////////////////////////////////////////////////\nstatic void bind(ocip::Statement& statement, bool isVariable, const parameterListType& parameters)\n{\n	if (isVariable)\n	{\n		stringListType names;\n		stringListType values;\n		parameterListConstIteratorType it;\n		for (it = parameters.begin(); it != parameters.end(); ++it)\n		{\n			names.push_back(it->name());\n			values.push_back(it->value());\n		}\n		assert(parameters.size() == names.size());\n		assert(parameters.size() == values.size());\n\n		// Bind array of parameter names\n		ocip::ParameterArray* bNames = new ocip::ParameterArray(\"n\", ocip::String, ocip::Input);\n		statement.addParameter(bNames);\n		bNames->value(names);\n\n		// Bind array of parameter values\n		ocip::ParameterArray* bValues = new ocip::ParameterArray(\"v\", ocip::String, ocip::Input);\n		statement.addParameter(bValues);\n		bValues->value(values);\n	}\n	else\n	{\n		parameterListConstIteratorType it;\n		long pos = 1;\n		for (it = parameters.begin(); it != parameters.end(); ++it)\n		{\n			switch (it->type())\n			{\n				case parameterType::Scalar:\n					{\n					ocip::ParameterValue* bValue = new ocip::ParameterValue(getParameterName(pos), ocip::String, ocip::Input);\n					statement.addParameter(bValue);\n					bValue->value(it->value());\n					++pos;\n					}\n					break;\n				case parameterType::Array:\n					{\n					ocip::ParameterArray* bValues = new ocip::ParameterArray(getParameterName(pos), ocip::String, ocip::Input);\n					statement.addParameter(bValues);\n					bValues->value(it->values());\n					++pos;\n					}\n					break;\n				case parameterType::Null:\n				default:\n					break;\n			}\n		}\n	}\n}\n\n///////////////////////////////////////////////////////////////////////////\nstatic std::string getParameterName(long position)\n{\n	std::ostringstream s;\n	s << position;\n\n	return \"p\" + s.str();\n}\n\n///////////////////////////////////////////////////////////////////////////\nstatic bool loadFileContent(const std::string filename, std::vector<unsigned char>& fileContents)\n{\n	std::ifstream file(filename.c_str(), std::ios_base::in | std::ios_base::binary);\n	if (!file.is_open())\n	{\n		return false;\n	}\n\n	// Get the file size\n	file.seekg(0, file.end);\n	int length = static_cast<int>(file.tellg());\n	file.seekg(0, file.beg);\n\n    fileContents.resize(length);\n\n	if (!file.read(reinterpret_cast<char*>(&fileContents[0]), length))\n	{\n		return false;\n	}\n\n	return true;\n}\n",
			"file": "src/oracleObject.cc",
			"file_size": 18602,
			"file_write_time": 130716688096291996,
			"settings":
			{
				"buffer_size": 18081,
				"line_ending": "Windows"
			}
		},
		{
			"file": "src/ocip_interface.cc",
			"settings":
			{
				"buffer_size": 20621,
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 392.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"Package Control: ",
				"Package Control: Upgrade/Overwrite All Packages"
			]
		],
		"width": 464.0
	},
	"console":
	{
		"height": 294.0,
		"history":
		[
			"bh_toggle_enable",
			"import urllib.request,os,hashlib; h = '2deb499853c4371624f5a07e27c334aa' + 'bf8c4e67d14fb0525ba4f89698a6d7e1'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by) ",
			"import urllib.request,os; pr='Preferences.sublime-settings'; ip='ignored_packages'; n='Package Control'; s=sublime.load_settings(pr); ig=s.get(ip); ig.append(n); s.set(ip,ig); sublime.save_settings('Preferences.sublime-settings'); pf=n+'.sublime-package'; urllib.request.install_opener(urllib.request.build_opener(urllib.request.ProxyHandler())); by=urllib.request.urlopen('https://packagecontrol.io/'+pf.replace(' ','%20')).read(); open(os.path.join(sublime.installed_packages_path(),pf),'wb').write(by); ig.remove(n); s.set(ip,ig); sublime.save_settings(pr); print('Package Control: 3.0.0 upgrade successful!')",
			"sublimelinter_lint",
			"import urllib.request,os; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); open(os.path.join(ipp, pf), 'wb').write(urllib.request.urlopen( 'http://sublime.wbond.net/' + pf.replace(' ','%20')).read())"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/D/MyDev/doberkofler/node_plsql",
		"/D/MyDev/doberkofler/node_plsql/src"
	],
	"file_history":
	[
		"/D/MyDev/doberkofler/node_plsql/src/global.h",
		"/D/MyDev/doberkofler/node_plsql/src/global.cc",
		"/D/MyDev/doberkofler/node_plsql/src/oracleError.cc",
		"/D/MyDev/doberkofler/node_plsql/lib/database_oracle.js",
		"/D/MyDev/doberkofler/node_plsql/lib/route.js",
		"/D/MyDev/doberkofler/node_plsql/src/nodeUtilities.cc",
		"/D/MyDev/doberkofler/node_plsql/src/ocip_interface.h",
		"/D/MyDev/doberkofler/node_plsql/node_plsql.sublime-project",
		"/D/MyDev/doberkofler/node_plsql/src/parameters.cc",
		"/D/MyDev/doberkofler/node_plsql/src/parameters.h",
		"/D/MyDev/ljs_app/trunk/periscope/build/periscope.sublime-project",
		"/D/MyDev/ljs_app/trunk/periscope/build/periscope.sublime-workspace",
		"/D/MyDev/doberkofler/node_plsql/.npmignore",
		"/D/MyDev/ljs_app/trunk/periscope/build/Gulpfile.js",
		"/E/DOWNLOADS/apex_4.2.6_en/apex/images/editor/codearea.js",
		"/D/MyDev/ljs_app/trunk/ljs_db/LJS_DB/PACKAGES/ods_sys_zip_java.jva",
		"/C/Users/doberkofler.LBITS/Desktop/example.txt",
		"/D/MyDev/ljs_app/trunk/ljs_db/LJS_DB/PACKAGES/ods_sys_url_java.jva",
		"/D/MyDev/ljs_app/trunk/ljs_db/LJS_DB/PACKAGES/ods_sys_zip.pkb",
		"/D/MyDev/ljs_app/trunk/ljs_db/LJS_DB/Java/mail.jar",
		"/D/MyDev/ljs_app/trunk/periscope/build/.eslintrc",
		"/D/MyDev/ljs_app/trunk/periscope/build/package.json",
		"/C/Users/doberkofler.LBITS/AppData/Local/Microsoft/Windows/Temporary Internet Files/Content.Outlook/SGCTWDIB/invoic-b27cab13b54b74540b5b3f1657501680.xml.txt",
		"/D/MyDev/ljs_app/trunk/ljs_db/LJS_DB/Java/test.sql",
		"/D/MyDev/ljs_app/trunk/ljs_db/LJS_DB/Java/mailtest.sql",
		"/C/Users/doberkofler.LBITS/Desktop/mailqueue/JavaMail2.sql",
		"/C/Users/doberkofler.LBITS/Desktop/mailqueue/ods_sys_mail.pkb",
		"/D/MyDev/ljs_app/trunk/ljs_db/Utilities/010_General/createDatabase/createDatabase.sql",
		"/C/Users/doberkofler.LBITS/Desktop/eslint-test/test.js",
		"/D/MyDev/doberkofler/eslint/.git/COMMIT_EDITMSG",
		"/D/MyDev/doberkofler/eslint/.git/rebase-merge/git-rebase-todo",
		"/D/MyDev/doberkofler/eslint/lib/rules/no-empty.js",
		"/D/MyDev/doberkofler/eslint/docs/rules/no-empty.md",
		"/D/MyDev/doberkofler/eslint/lib/rules/camelcase.js",
		"/D/MyDev/doberkofler/eslint/tests/lib/rules/camelcase.js",
		"/D/MyDev/doberkofler/eslint/docs/rules/camelcase.md",
		"/D/MyDev/doberkofler/eslint/tests/lib/rules/no-empty.js",
		"/D/MyDev/ljs_app/trunk/periscope/build/src/modules/las_dlg_adminconsole/las_dlg_adminconsole.css",
		"/D/MyDev/ljs_app/trunk/periscope/build/libs/api/tablesorter-master/widgets/widget-columnSelector.js",
		"/D/MyDev/ljs_app/trunk/periscope/build/utils/config.js",
		"/D/MyDev/ljs_app/trunk/periscope/examples/eslint-custom-rules/test.js",
		"/D/MyDev/doberkofler/eslint/docs/rules/dot-notation.md",
		"/C/Users/doberkofler.LBITS/Desktop/temp/camelcase.md",
		"/C/Users/doberkofler.LBITS/Desktop/temp/camelcase.js",
		"/C/Users/doberkofler.LBITS/Desktop/temp/test/camelcase.js",
		"/D/MyDev/doberkofler/eslint/docs/rules/curly.md",
		"/D/MyDev/doberkofler/eslint/docs/rules/brace-style.md",
		"/D/MyDev/ljs_app/trunk/periscope/examples/eslint-custom-rules/eslint_rules/new-rule.js",
		"/D/MyDev/doberkofler/eslint/tests/lib/rules/no-duplicate-case.js",
		"/D/MyDev/doberkofler/eslint/lib/rules/valid-jsdoc.js",
		"/D/MyDev/doberkofler/eslint/docs/rules/README.md",
		"/D/MyDev/doberkofler/eslint/lib/rules/comma-style.js",
		"/D/MyDev/doberkofler/eslint/lib/rules/comma-spacing.js",
		"/D/MyDev/doberkofler/eslint/lib/rules/comma-dangle.js",
		"/D/MyDev/doberkofler/eslint/lib/rules/brace-style.js",
		"/D/MyDev/doberkofler/eslint/lib/rules/block-scoped-var.js",
		"/D/MyDev/doberkofler/eslint/lib/rules/no-duplicate-case.js",
		"/D/MyDev/ljs_app/trunk/periscope/examples/eslint-custom-rules/.eslintrc",
		"/D/MyDev/doberkofler/eslint/tests/lib/rules.js",
		"/D/MyDev/doberkofler/eslint/lib/rules/default-case.js",
		"/D/MyDev/doberkofler/eslint/lib/rules/yoda.js",
		"/D/MyDev/doberkofler/eslint/lib/rules/no-undefined.js",
		"/D/MyDev/doberkofler/eslint/lib/rules/no-proto.js",
		"/D/MyDev/doberkofler/eslint/lib/rules/no-iterator.js",
		"/D/MyDev/doberkofler/eslint/lib/rules/no-extra-bind.js",
		"/D/MyDev/doberkofler/eslint/lib/rules/no-extend-native.js",
		"/D/MyDev/doberkofler/eslint/lib/rules/no-caller.js",
		"/D/MyDev/doberkofler/eslint/lib/rules/no-alert.js",
		"/D/MyDev/doberkofler/eslint/lib/rules/new-cap.js",
		"/D/MyDev/doberkofler/eslint/lib/rules/dot-notation.js",
		"/C/Program Files/Sublime Text 3/node_plsql.sublime-project",
		"/C/Program Files/Sublime Text 3/node_plsql.sublime-workspace",
		"/D/MyDev/doberkofler/node_plsql/_LJ_UNITTEST.cmd",
		"/D/MyDev/doberkofler/node_plsql/_LJ_UNITTEST.json",
		"/D/MyDev/doberkofler/node_plsql/lib/cgi.js",
		"/D/MyDev/doberkofler/node_plsql/_test.json",
		"/D/MyDev/doberkofler/node_plsql/package.json",
		"/D/MyDev/doberkofler/node_plsql/.travis.yml",
		"/D/Middleware/qualiant/periscope/periscope.conf",
		"/D/MyDev/doberkofler/node_plsql/LJ_UNITTEST.json",
		"/D/MyDev/doberkofler/eslint/.travis.yml",
		"/D/MyDev/doberkofler/eslint/docs/rules/no-duplicate-case.md",
		"/D/MyDev/ljs_app/trunk/ljs_db/LJS_DB/Install/runInstall.py",
		"/D/MyDev/ljs_app/tags/repository/f_installable_versions.sql",
		"/C/Users/doberkofler.LBITS/Desktop/TaskTracking/renameVersion.sql",
		"/D/MyDev/ljs_app/trunk/ljs_db/LJS_DB/Install/runInstall.pkb",
		"/D/MyDev/ljs_app/trunk/ljs/CMakeLists.txt",
		"/D/MyDev/ljs_app/trunk/CMakeLists.txt",
		"/D/MyDev/ljs_app/trunk/ljs_db/LJS_DB/UPDATE/U080000.sql",
		"/D/MyDev/ljs_app/trunk/ljs_db/LJS_DB/UPDATE/U080000_add_column_las_horate_prodid.sql",
		"/D/MyDev/ljs_app/trunk/ljs_db/LJS_DB/UPDATE/U080000_add_column_las_prod_accessid.sql",
		"/D/MyDev/ljs_app/trunk/ljs_db/LJS_DB/UPDATE/U080000_add_columns_ACCNT_interface.sql",
		"/D/MyDev/ljs_app/trunk/ljs_db/LJS_DB/UPDATE/U080000_add_columns_jobsurvey_pos.sql",
		"/D/MyDev/ljs_app/trunk/ljs_db/LJS_DB/UPDATE/U080000_add_table_las_projecttaskrecalc.sql",
		"/D/MyDev/ljs_app/trunk/ljs_db/LJS_DB/UPDATE/U080000_AddPrivEmplAllAgencies.sql",
		"/D/MyDev/ljs_app/trunk/ljs_db/LJS_DB/UPDATE/U080000_Breadcrumbs.sql",
		"/D/MyDev/ljs_app/trunk/ljs_db/LJS_DB/UPDATE/U080000_drop_profitability_views.sql",
		"/D/MyDev/ljs_app/trunk/ljs_db/LJS_DB/UPDATE/U080000_Hint.sql",
		"/D/MyDev/ljs_app/trunk/ljs_db/LJS_DB/UPDATE/U080000_modify_las_projecttask.sql",
		"/D/MyDev/ljs_app/trunk/ljs_db/LJS_DB/UPDATE/U080000_modify_table_las_mand.sql",
		"/D/MyDev/ljs_app/trunk/ljs_db/LJS_DB/UPDATE/U080000_remove_LAS_DLG_ChartWidget.sql",
		"/D/MyDev/ljs_app/trunk/ljs_db/LJS_DB/UPDATE/U080000_remove_LAS_DLG_ProjectTaskAddi.sql",
		"/D/MyDev/ljs_app/trunk/ljs_db/LJS_DB/UPDATE/U080000_remove_LAS_DLG_Role.sql",
		"/D/MyDev/ljs_app/trunk/ljs_db/LJS_DB/UPDATE/U080000_remove_LAS_SessionPeriscope.sql",
		"/D/MyDev/ljs_app/trunk/ljs_db/LJS_DB/UPDATE/U080000_remove_recalc_jobs.sql",
		"/C/Program Files/Sublime Text 3/eslint.sublime-project",
		"/C/Program Files/Sublime Text 3/periscope.sublime-project",
		"/D/MyDev/doberkofler/eslint/lib/rules/no-undef.js",
		"/D/MyDev/doberkofler/eslint/lib/eslint.js",
		"/D/MyDev/doberkofler/eslint/lib/rules.js",
		"/D/MyDev/doberkofler/eslint/conf/eslint.json",
		"/D/MyDev/doberkofler/eslint/tests/lib/rules/no-empty-catch.js",
		"/D/MyDev/doberkofler/eslint/lib/rules/no-empty-catch.js",
		"/D/MyDev/doberkofler/eslint/docs/rules/no-empty-catch.md",
		"/D/MyDev/ljs_app/trunk/periscope/examples/eslint-customized/test.js",
		"/D/MyDev/doberkofler/eslint/tests/lib/rules/no-mixed-requires.js",
		"/D/MyDev/doberkofler/eslint/lib/rules/no-mixed-requires.js",
		"/D/MyDev/doberkofler/eslint/docs/README.md",
		"/D/MyDev/ljs_app/trunk/periscope/examples/eslint-customized/eslint_rules/new-rule.js",
		"/D/MyDev/doberkofler/eslint/lib/rules/consistent-this.js",
		"/D/MyDev/ljs_app/trunk/periscope/examples/eslint-customized/.eslintrc",
		"/D/MyDev/ljs_app/trunk/periscope/examples/eslint-customized/eslint_rules/throw.js",
		"/D/MyDev/ljs_app/trunk/periscope/build/src/modules/las_dlg_ganttchart/las_dlg_ganttchart.js",
		"/D/MyDev/ljs_app/trunk/ljs_db/LJS_DB/TestData/data/default/gen_90_10_020_PMRM.sql",
		"/D/MyDev/doberkofler/eslint/lib/rules/no-throw-literal.js",
		"/E/Dropbox/writer/LJ - WORKFLOWS.txt",
		"/C/Users/doberkofler.LBITS/AppData/Local/Temp/gen_90_10_020_PMRM.sql-rev44901.svn001.tmp.sql",
		"/C/Users/doberkofler.LBITS/AppData/Local/Temp/gen_90_10_020_PMRM.sql-rev44901.svn000.tmp.sql"
	],
	"find":
	{
		"height": 27.0
	},
	"find_in_files":
	{
		"height": 90.0,
		"where_history":
		[
			"D:\\MyDev\\doberkofler\\node_plsql\\lib,D:\\MyDev\\doberkofler\\node_plsql\\test,D:\\MyDev\\doberkofler\\node_plsql\\src",
			"D:\\MyDev\\ljs_app\\trunk\\periscope\\build\\src,D:\\MyDev\\ljs_app\\trunk\\periscope\\build\\test,D:\\MyDev\\ljs_app\\trunk\\ljs_db\\LJS_DB\\PACKAGES",
			"D:\\MyDev\\ljs_app\\trunk\\periscope\\build\\src,D:\\MyDev\\ljs_app\\trunk\\periscope\\build\\test,D:\\MyDev\\ljs_app\\trunk\\ljs_db\\LJS_DB\\PACKAGES,D:\\MyDev\\doberkofler\\eslint\\lib\\rules",
			"D:\\MyDev\\ljs_app\\trunk\\periscope\\build\\src,D:\\MyDev\\ljs_app\\trunk\\periscope\\build\\test,D:\\MyDev\\ljs_app\\trunk\\ljs_db\\LJS_DB\\PACKAGES",
			"D:\\MyDev\\doberkofler\\node_plsql,*.js",
			"D:\\MyDev\\doberkofler\\node_plsql",
			"D:\\MyDev\\ljs_app\\trunk\\periscope\\build\\src,D:\\MyDev\\ljs_app\\trunk\\periscope\\build\\test,D:\\MyDev\\ljs_app\\trunk\\ljs_db\\LJS_DB\\PACKAGES",
			"D:\\MyDev\\ljs_app\\trunk\\periscope\\build\\node_modules\\selenium-webdriver,*.js",
			"D:\\MyDev\\ljs_app\\trunk\\periscope\\build\\node_modules\\selenium-webdriver",
			"D:\\MyDev\\ljs_app\\trunk\\periscope\\build\\src,D:\\MyDev\\ljs_app\\trunk\\periscope\\build\\test,D:\\MyDev\\ljs_app\\trunk\\ljs_db\\LJS_DB\\PACKAGES",
			"D:\\MyDev\\ljs_app\\trunk\\periscope\\build\\src,D:\\MyDev\\ljs_app\\trunk\\ljs_db\\LJS_DB\\PACKAGES",
			"D:\\MyDev\\ljs_app\\trunk\\periscope\\build\\src",
			"D:\\MyDev\\ljs_app\\trunk\\periscope\\build\\src,D:\\MyDev\\ljs_app\\trunk\\ljs_db\\LJS_DB\\PACKAGES",
			"D:\\MyDev\\ljs_app\\trunk\\periscope\\build\\test,*.js",
			"D:\\MyDev\\ljs_app\\trunk\\periscope\\build\\node_modules\\selenium-webdriver",
			"D:\\MyDev\\ljs_app\\trunk\\periscope\\build\\src,D:\\MyDev\\ljs_app\\trunk\\ljs_db\\LJS_DB\\PACKAGES",
			"D:\\MyDev\\ljs_app\\trunk\\periscope\\build\\node_modules\\selenium-webdriver",
			"D:\\MyDev\\ljs_app\\trunk\\periscope\\build\\test,*.js",
			"D:\\MyDev\\ljs_app\\trunk\\periscope\\build\\src,D:\\MyDev\\ljs_app\\trunk\\ljs_db\\LJS_DB\\PACKAGES",
			"D:\\MyDev\\doberkofler\\eslint",
			"D:\\MyDev\\ljs_app\\trunk\\periscope\\build\\src,D:\\MyDev\\ljs_app\\trunk\\ljs_db\\LJS_DB\\PACKAGES",
			"D:\\MyDev\\ljs_app\\trunk\\periscope\\build\\src,*.js",
			"D:\\MyDev\\ljs_app\\trunk\\periscope\\build\\test,*.js",
			"D:\\MyDev\\ljs_app\\trunk\\periscope\\build\\src,*.js",
			"D:\\MyDev\\ljs_app\\trunk\\ljs_db\\LJS_DB\\PACKAGES",
			"D:\\MyDev\\ljs_app\\trunk\\periscope\\build\\src,*.js",
			"D:\\MyDev\\ljs_app\\trunk\\ljs_db\\LJS_DB\\PACKAGES",
			"D:\\MyDev\\ljs_app\\trunk\\periscope\\build\\src,*.js",
			"D:\\MyDev\\ljs_app\\trunk\\ljs_db\\LJS_DB\\PACKAGES",
			"D:\\MyDev\\ljs_app\\trunk\\periscope\\build\\src,*.js",
			"D:\\MyDev\\ljs_app\\trunk\\ljs_db\\LJS_DB\\PACKAGES",
			"D:\\MyDev\\ljs_app\\trunk\\periscope\\build\\src,*.js",
			"D:\\MyDev\\ljs_app\\trunk\\ljs_db\\LJS_DB\\PACKAGES",
			"D:\\MyDev\\ljs_app\\trunk\\periscope\\build\\src,*.js",
			"D:\\MyDev\\ljs_app\\trunk\\ljs_db\\LJS_DB\\PACKAGES",
			"D:\\MyDev\\ljs_app\\trunk\\periscope\\build\\src,*.js",
			"D:\\MyDev\\ljs_app\\trunk\\ljs_db\\LJS_DB\\PACKAGES",
			"D:\\MyDev\\ljs_app\\trunk\\periscope\\build\\src,*.js",
			"D:\\MyDev\\ljs_app\\trunk\\ljs_db\\LJS_DB\\PACKAGES",
			"D:\\MyDev\\ljs_app\\trunk\\periscope\\build\\src,*.js",
			"D:\\MyDev\\ljs_app\\trunk\\ljs_db\\LJS_DB\\PACKAGES",
			"D:\\MyDev\\ljs_app\\trunk\\periscope\\build\\src,*.js",
			"D:\\MyDev\\ljs_app\\trunk\\ljs_db\\LJS_DB\\PACKAGES",
			"D:\\MyDev\\ljs_app\\trunk\\ljs_db\\LJS_DB\\PACKAGES,D:\\MyDev\\ljs_app\\trunk\\ljs",
			"D:\\MyDev\\ljs_app\\trunk\\ljs_db\\LJS_DB\\PACKAGES",
			"D:\\MyDev\\ljs_app\\trunk\\periscope\\build\\test\\selenium",
			"D:\\MyDev\\ljs_app\\trunk\\periscope\\build\\src,*.js",
			"D:\\MyDev\\ljs_app\\trunk\\ljs_db\\LJS_DB\\PACKAGES",
			"D:\\MyDev\\ljs_app\\trunk\\periscope\\build\\test\\selenium",
			"D:\\MyDev\\ljs_app\\trunk\\periscope\\build\\test\\selenium\\tests",
			"D:\\MyDev\\ljs_app\\trunk\\periscope\\build\\src,*.js",
			"D:\\MyDev\\ljs_app\\trunk\\ljs_db\\LJS_DB\\PACKAGES",
			"D:\\MyDev\\ljs_app\\trunk\\periscope\\build\\src,*.js",
			"D:\\MyDev\\ljs_app\\trunk\\periscope\\build\\src",
			"D:\\MyDev\\ljs_app\\trunk\\periscope\\src",
			"D:\\MyDev\\ljs_app\\trunk\\periscope",
			"D:\\MyDev\\ljs_app\\trunk\\ljs_db\\LJS_DB",
			"D:\\MyDev\\ljs_app\\trunk\\ljs_db\\LJS_DB\\PACKAGES",
			"D:\\MyDev\\ljs_app\\trunk\\ljs",
			"D:\\MyDev\\ljs_app\\trunk\\ljs_db\\LJS_DB\\packages",
			"D:\\MyDev\\ljs_app\\trunk\\ljs_db\\CLI_DB",
			"D:\\MyDev\\ljs_app\\trunk\\ljs",
			"D:\\MyDev\\ljs_app\\trunk\\ljs_db\\LJS_DB",
			"D:\\MyDev\\ljs_app\\trunk\\periscope\\build\\src",
			"D:\\MyDev\\ljs_app\\trunk\\ljs_db\\LJS_DB\\packages",
			"D:\\MyDev\\ljs_app\\trunk\\periscope\\build\\src,D:\\MyDev\\ljs_app\\trunk\\ljs_db\\LJS_DB\\packages",
			"D:\\MyDev\\ljs_app\\trunk\\periscope\\build\\src,D:\\MyDev\\ljs_app\\trunk\\periscope\\build\\libs,D:\\MyDev\\ljs_app\\trunk\\ljs_db\\LJS_DB\\packages",
			"D:\\MyDev\\ljs_app\\trunk\\periscope\\build\\src,D:\\MyDev\\ljs_app\\trunk\\ljs_db\\LJS_DB\\packages",
			"D:\\MyDev\\ljs_app\\trunk\\periscope\\build,D:\\MyDev\\ljs_app\\trunk\\ljs_db\\LJS_DB\\packages",
			"D:\\MyDev\\ljs_app\\trunk\\periscope\\build\\src,D:\\MyDev\\ljs_app\\trunk\\ljs_db\\LJS_DB\\packages",
			"D:\\MyDev\\ljs_app\\trunk\\periscope\\build\\src",
			"D:\\MyDev\\ljs_app\\trunk\\periscope\\build\\src,D:\\MyDev\\ljs_app\\trunk\\ljs_db\\LJS_DB\\packages",
			"D:\\MyDev\\ljs_app\\trunk\\periscope\\build\\src",
			"D:\\MyDev\\ljs_app\\trunk\\periscope",
			"D:\\MyDev\\ljs_app\\trunk\\ljs_db\\ljs_db\\packages",
			"D:\\MyDev\\ljs_app\\trunk\\periscope\\build\\src,D:\\MyDev\\ljs_app\\trunk\\periscope\\build\\test",
			"D:\\MyDev\\ljs_app\\trunk\\ljs_db\\LJS_DB\\PACKAGES",
			"$(",
			"D:\\MyDev\\doberkofler\\node_plsql\\test",
			"D:\\MyDev\\ljs_app\\trunk\\periscope\\build\\src,D:\\MyDev\\ljs_app\\trunk\\periscope\\build\\libs,D:\\MyDev\\ljs_app\\trunk\\periscope\\build\\test",
			"D:\\MyDev\\ljs_app\\trunk\\periscope\\build\\src,D:\\MyDev\\ljs_app\\trunk\\periscope\\build\\lib,D:\\MyDev\\ljs_app\\trunk\\periscope\\build\\test",
			"D:\\MyDev\\ljs_app\\trunk\\periscope,-node_modules",
			"D:\\MyDev\\ljs_app\\trunk\\periscope,-D:\\MyDev\\ljs_app\\trunk\\periscope\\build\\node_modules",
			"D:\\MyDev\\ljs_app\\trunk\\periscope",
			"D:\\MyDev\\ljs_app\\trunk\\periscope\\build\\src",
			"D:\\MyDev\\ljs_app\\trunk\\periscope",
			"D:\\MyDev\\ljs_app\\trunk\\ljs_db\\LJS_DB\\TestData",
			"D:\\MyDev\\ljs_app\\trunk\\ljs_db\\LJS_DB\\UnitTest",
			"D:\\MyDev\\ljs_app\\trunk\\ljs_db\\LJS_DB",
			"D:\\MyDev\\ljs_app\\trunk\\periscope\\build\\node_modules\\gulp",
			"D:\\MyDev\\ljs_app\\trunk\\ljs_db\\LJS_DB",
			"D:\\MyDev\\doberkofler\\node_plsql\\test",
			"D:\\MyDev\\doberkofler\\node_plsql\\lib",
			"D:\\MyDev\\doberkofler\\node_plsql\\test",
			"D:\\MyDev\\ljs_app\\trunk\\ljs_db\\LJS_DB",
			"E:\\TEMP\\thoth-gateway-1-3-7\\source\\PLSQLGatewayModule",
			"D:\\MyDev\\ljs_app\\trunk\\ljs_db\\LJS_DB",
			"D:\\MyDev\\ljs_app\\trunk\\ljs_db\\LJS_DB\\PACKAGES",
			"D:\\MyDev\\ljs_app\\trunk\\ljs_db\\LJS_DB",
			"D:\\MyDev\\doberkofler\\node_plsql",
			"D:\\MyDev\\ljs_app\\trunk\\ljs_db\\LJS_DB",
			"D:\\MyDev\\doberkofler\\node_plsql",
			"C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include",
			"D:\\MyDev\\doberkofler\\node_plsql",
			"E:\\TEMP\\thoth-gateway-1-3-7\\source\\PLSQLGatewayModule",
			"D:\\MyDev\\doberkofler\\node_plsql",
			"D:\\MyDev\\doberkofler\\node_plsql\\src",
			"D:\\instantclient_12_1_x64\\sdk\\include",
			"E:\\TEMP\\ocilib-3.12.1",
			"D:\\instantclient_12_1_x64\\sdk",
			"D:\\MyDev\\ljs_app\\trunk",
			"E:\\TEMP\\thoth-gateway-1-3-7\\source\\PLSQLGatewayModule",
			"D:\\MyDev\\ljs_app\\trunk\\ljs_db\\LJS_DB\\PACKAGES",
			"D:\\MyDev\\doberkofler\\node-plsql_server\\src",
			"D:\\MyDev\\doberkofler\\node-plsql_server\\node_modules\\chai",
			"D:\\MyDev\\doberkofler\\node-plsql_server\\node_modules\\chai\\lib",
			"D:\\instantclient_12_1_x64\\sdk\\include",
			"D:\\MyDev\\ljs_app\\trunk\\ljs_db\\LJS_DB,D:\\MyDev\\ljs_app\\trunk\\periscope\\build\\src",
			"D:\\MyDev\\ljs_app\\trunk\\ljs_db\\LJS_DB,D:\\MyDev\\ljs_app\\trunk\\periscope\\build",
			"D:\\MyDev\\ljs_app\\trunk\\ljs_db\\LJS_DB,D:\\MyDev\\ljs_app\\trunk\\periscope",
			"D:\\MyDev\\ljs_app\\trunk\\ljs_db\\LJS_DB D:\\MyDev\\ljs_app\\trunk\\periscope",
			"D:\\MyDev\\ljs_app\\trunk\\ljs_db\\LJS_DB,D:\\MyDev\\ljs_app\\trunk\\periscope",
			"D:\\MyDev\\ljs_app\\trunk\\ljs_db\\LJS_DB",
			"D:\\MyDev\\ljs_app\\trunk\\periscope"
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"value()",
			"parameterListType",
			"propertyListType",
			"v8::Array",
			"IsArray",
			"must be an object with all properties of type string",
			"ods_sys_mail",
			"QMail",
			"'",
			"nomethods",
			"camelcase",
			"console",
			"var o = {bar_baz: 1}",
			"console",
			"options",
			"MemberExpression",
			"versionRepository",
			"Unable to find version id for version",
			"18",
			"071800",
			"U071800_",
			"no-empty-c",
			"addE",
			"createHourTask",
			"theFixedDateRange",
			"addTaskInfo",
			",	list",
			"addI",
			"addE",
			"setCompleteness",
			"createTotalTask",
			"addH",
			"FixedDateRange",
			"fixed",
			"addH",
			"aList",
			"addH",
			"InputListType",
			"addH",
			"InputListType",
			"addH",
			"Client Planning Meeting",
			"chmod",
			".dest",
			".dst",
			"semi",
			"canvas",
			"$canvas",
			"$container",
			"Flot",
			"console",
			"userchart",
			"chart",
			"_lineChart",
			"fullpage",
			"ganttfullpage",
			"chart",
			"gantt",
			"\"",
			"renderChart",
			"ui-widget-overlay",
			"modal",
			"getJSON",
			"istanbul",
			"istanb",
			"istanbul",
			"istanmb",
			"internalerror",
			"errorHandler404",
			"istanmb",
			"istanbul",
			"test",
			"internalError",
			"headerOther",
			"var i",
			"database_shim",
			"binding_path",
			"eslint",
			"BOOLEAN",
			"warning",
			"warninhg",
			"console.log",
			"_submitAction",
			"\"",
			"ajax",
			"iconsForInput",
			"formSuccess",
			"initForm",
			"wait",
			"DEFAULT_TIMEOUT",
			"wait",
			"getDefaultTimeout",
			"SCREENSHOT_DIRECTORY",
			"waitForPageLoad",
			"wait",
			"_DEFAULT_TIMEOUT",
			"wait",
			"sleep",
			"wait(",
			"sleep",
			"wait",
			"ControlFlow",
			"wait",
			"ControlF",
			"wait",
			"controlF",
			"wait",
			"wait(",
			"client.wait",
			"wait",
			"json_getCalendar",
			"showListOfEmplWorkload",
			"send_mail_java",
			"\"",
			"LAS_DLG_ProjectWorkload",
			"addi",
			"PROJECTTASKADDI",
			"LAS_DLG_ProjectTaskAddi",
			"odsdefect",
			"LAS_DLG_JobList.get",
			"LAS_DLG_JobList.",
			"GetSortOrderString",
			"GetPrivateJobList",
			"GetPrivateJobs",
			"GetPrivateAndUsedJobs",
			"GetJobList",
			"GetClientList",
			"print"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"MailTest",
			"\"",
			"U080000_",
			"list",
			"_$canvas",
			"_$container",
			"_chart",
			"'",
			"databaseShim",
			"bindingPath",
			"'",
			"_SCREENSHOT_DIRECTORY",
			"'",
			"isNonEmptyString",
			"assert.",
			"(obj)",
			"function (obj, message)",
			"'",
			"_logoff()",
			"periscope.",
			"client",
			"periscope.",
			"findElementByXPath",
			"screenshotDirectory",
			"utilities.",
			"client",
			"BASE_URL",
			"client",
			"webdriver",
			"test",
			"selenium.",
			"utilities.",
			"ods_dlg_form_page",
			"signin_",
			"sutil.test.",
			"TEST.",
			"widget",
			"putil.config.",
			"json_sendConfigurationStatus",
			"restoreLog",
			"stopLog",
			"originalConsoleLog",
			"doNotLog",
			"windowOnError",
			"errorHandler",
			"captureStop",
			"captureStart",
			"originalConsoleLog",
			"__testNamespace__",
			"booleanProperty",
			"stringProperty",
			"numericProperty",
			"getWeek",
			"weekpicker",
			"svg",
			"$parentContainer",
			"debugFlag",
			"rebindTablePlugin",
			"removeAllClients",
			"expandAllClients",
			"getProCliListJSON",
			"taskRowTemplate",
			"projectRowTemplate",
			"nextTaskTemplate",
			"NEXTTASK",
			"launcherID",
			"select2createSearchChoice",
			"select2formatResult",
			"select2formatSelection",
			"select2query",
			"percentValue",
			"markTasks",
			"changeRecalculatedInfoLayout",
			"recalculatedInfoText",
			"thisAddData",
			"$thisAddData",
			"hiddenID",
			"displayDateClass",
			"elementClass",
			"pkHoPosNo",
			"apkHoPosNo",
			"positionData",
			"extendedRowDom",
			"loadExtendedData",
			"loadData",
			"tempRow",
			"jsonTemp",
			"currentRowSelect",
			"customerID",
			"parentRow",
			"sortingTemp",
			"tableDataCust",
			"showError",
			"extendedClass",
			"openingInProcessRows",
			"tableData",
			"tableDataHeader",
			"tableExtRowTemplate",
			"tableRowTemplate",
			"tableHeaderTemplate",
			"convertPosTypeToID",
			"convertIDToPosType",
			"adjustForPosType",
			"setServcat",
			"IDToPosType",
			"posTypeToID",
			"markNotStartedProject",
			"notStartedProjectValue",
			"changeRecalculatedInfoLayout",
			"recalculatedInfoText",
			"// \\1",
			"// ",
			"TST_DLG_Role",
			"LAS_SQL_Periscope_UT",
			"",
			"agencyid",
			"",
			"TRUNK",
			"taskUtilities",
			"deployDirCSS",
			"dstDirCSS",
			"dstFileCSS",
			"srcFileCSS",
			"dstFileStyle",
			"srcFileStyle",
			"deployDirJS",
			"dstDirJS",
			"dstFileJS"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 3,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "lib/request.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9057,
						"regions":
						{
						},
						"selection":
						[
							[
								7782,
								7782
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 714.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "error.log",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 36655,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "src/oracleBindings.cc",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 15988,
						"regions":
						{
						},
						"selection":
						[
							[
								9698,
								9698
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"syntax": "Packages/C++/C++.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 9823.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "src/oracleObject.cc",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 18081,
						"regions":
						{
						},
						"selection":
						[
							[
								12055,
								12055
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"syntax": "Packages/C++/C++.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 7372.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "src/ocip_interface.cc",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 20621,
						"regions":
						{
						},
						"selection":
						[
							[
								10161,
								10161
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"syntax": "Packages/C++/C++.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 4047.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 27.0
	},
	"input":
	{
		"height": 0.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "node_plsql.sublime-project",
	"replace":
	{
		"height": 50.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"dht",
				"libs\\dhtmlx-gantt\\dhtmlxgantt.js"
			],
			[
				"tasks",
				"build-utilities\\tasks.js"
			],
			[
				"gu",
				"Gulpfile.js"
			],
			[
				"gulp",
				"Gulpfile.js"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 225.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
